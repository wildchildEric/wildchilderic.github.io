<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | WildChild's Blog]]></title>
  <link href="http://wildchildEric.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://wildchildEric.github.io/"/>
  <updated>2013-10-02T03:46:01+08:00</updated>
  <id>http://wildchildEric.github.io/</id>
  <author>
    <name><![CDATA[Eric Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby中Block,Proc,Lambda区别(译)]]></title>
    <link href="http://wildchildEric.github.io/blog/2013/10/01/rubyde-blockyu-proc/"/>
    <updated>2013-10-01T22:52:00+08:00</updated>
    <id>http://wildchildEric.github.io/blog/2013/10/01/rubyde-blockyu-proc</id>
    <content type="html"><![CDATA[<h3>block,proc,lambda是什么？</h3>

<p>行话：闭包在Ruby中的体现。
</br>
白话：我们想复用的代码的组织方式。</p>

<p>``` ruby Block Examples
[1,2,3].each { |x| puts x*2 }   # block is in between the curly braces</p>

<p>[1,2,3].each do |x|
  puts x*2                    # block is everything between the do and end
end</p>

<h1>Proc Examples</h1>

<p>p = Proc.new { |x| puts x<em>2 } #p = proc{ |x| puts x</em>2 }
[1,2,3].each(&amp;p)              # The &lsquo;&amp;&rsquo; tells ruby to turn the proc into a block</p>

<p>proc = Proc.new { puts &ldquo;Hello World&rdquo; }
proc.call                     # The body of the Proc object gets executed when called</p>

<h1>Lambda Examples</h1>

<p>lam = lambda { |x| puts x<em>2 } #lam = &ndash;>(x) {puts x</em>2}
[1,2,3].each(&amp;lam)</p>

<p>lam = lambda { puts &ldquo;Hello World&rdquo; }
lam.call
```</p>

<p>这些代码看起来非常相似，但其中有些细微的区别，我们接下来会讲述。</p>

<h3>Block和Proc区别</h3>

<h4>1.proc是对象，而block不是</h4>

<p>一个proc是Proc类的实例。
<code>ruby
p = Proc.new { puts "Hello World" }
</code></p>

<p>这使得我们可以在proc上调用它的方法，赋值给变量。proc也可以返回他们自己。
<code>ruby
p.call  # prints 'Hello World'
p.class # returns 'Proc'
a = p   # a now equals p, a Proc instance
p       # returns a proc object '#&lt;Proc:0x007f96b1a60eb0@(irb):46&gt;'
</code></p>

<p>相反，block只是方法调用语法的一部分。单独存在的block没有意义且只能存在于方法调用的参数列表里。
<code>ruby
{ puts "Hello World"}       # syntax error  
a = { puts "Hello World"}   # syntax error
[1,2,3].each {|x| puts x*2} # only works as part of the syntax of a method call
</code></p>

<h4>2.在参数列表中，block只能最多出现一次</h4>

<p>相反，你可以向方法传递多个proc
``` ruby
def multiple_procs(proc1, proc2)
  proc1.call
  proc2.call
end</p>

<p>a = Proc.new { puts &ldquo;First proc&rdquo; }
b = Proc.new { puts &ldquo;Second proc&rdquo; }</p>

<p>multiple_procs(a,b)
```</p>

<h3>Proc和Lambda的区别</h3>

<p>在我深入他们区别之前，需要强调的是他们都是Proc对象。
``` ruby
proc = Proc.new { puts &ldquo;Hello world&rdquo; }
lam = lambda { puts &ldquo;Hello World&rdquo; }</p>

<p>proc.class # returns &lsquo;Proc&rsquo;
lam.class  # returns &lsquo;Proc&rsquo;
<code>
然而lambda是一种不同的proc，对象返回的时候我们可以觉察到这细微的差别：
</code> ruby
proc   # returns &lsquo;#&lt;Proc:0x007f96b1032d30@(irb):75>&rsquo;
lam    # returns &lsquo;&lt;Proc:0x007f96b1b41938@(irb):76 (lambda)>&rsquo;
```
&lsquo;(lambda)'记号提醒我们他们很相似，但也有不同，下面就是一些关键的区别</p>

<h4>1.Lambda检查参数的个数，而proc则不</h4>

<p><code>ruby
lam = lambda { |x| puts x }    # creates a lambda that takes 1 argument
lam.call(2)                    # prints out 2
lam.call                       # ArgumentError: wrong number of arguments (0 for 1)
lam.call(1,2,3)                # ArgumentError: wrong number of arguments (3 for 1)
</code>
相反,proc并不关心参数个数是否正确
<code>ruby
proc = Proc.new { |x| puts x } # creates a proc that takes 1 argument
proc.call(2)                   # prints out 2
proc.call                      # returns nil
proc.call(1,2,3)               # prints out 1 and forgets about the extra arguments
</code>
如上所示，在参数个数错误的情况下调用proc，并没有发生错误。如果proc需要一个参数，但是没有参数传入，这样的情况下proc会返回nil值；如果参数个数多余proc所需参数个数，则proc会忽略多余的参数。</p>

<h4>2.Lambda和proc以不同方式处理'return'关键字</h4>

<p>在lambda中的'return'返回到调用lambda的地方
``` ruby
def lambda_test
  lam = lambda { return }
  lam.call
  puts &ldquo;Hello world&rdquo;
end</p>

<p>lambda_test                 # calling lambda_test prints &lsquo;Hello World&rsquo;
<code>
在proc中的'return'返回到调用包含proc调用的方法的地方
</code> ruby
def proc_test
  proc = Proc.new { return }
  proc.call
  puts &ldquo;Hello world&rdquo;
end</p>

<p>proc_test                 # calling proc_test prints nothing
```</p>

<h3>那么什么是闭包（closure）？</h3>

<p>行话：带有引用环境的函数或者函数引用。不同于单纯的函数，闭包允许访问非本地变量，甚至在其作用域外。-维基百科
</br>
白话：类似一个手提箱，是一组这样的代码： 在其被打开（被调用）时，包含了所有当时打包的（创建的）。
``` ruby Example of Proc objects preserving local context
def counter
  n = 0
  return Proc.new { n+= 1 }
end</p>

<p>a = counter
a.call            # returns 1
a.call            # returns 2</p>

<p>b = counter
b.call            # returns 1</p>

<p>a.call            # returns 3
```</p>

<h3>背景部分1：Lambda微积分和匿名函数</h3>

<p>Lambda得名于一种1930年代用于研究基础数学的微积分，Lambda微积分帮助简化可计算方程式的语意从而易于被学习。相关度最高的简化是使方程式匿名，也就是没有显式的基于方程式名字。
<code>ruby
sqsum(x,y) = x*x + y*y  #&lt;-- normal function
(x,y) -&gt; x*x + y*y #&lt;-- anonymous function
</code>
一般而言，在编程中，术语lambda指匿名函数，这些匿名函数在一些编程语言中很常见且是显式的（如javascript），而在另外一些语言中则比较隐秘（如Ruby）。</p>

<h3>背景部分2：Proc名字的由来</h3>

<p>Proc是procedure（程序,过程）的缩写，既是用来执行特定任务而被打包成单元的一组指令。在不同的语言中，可能被称作function，routine，method或者unit。他们在一个程序中通常会被调用多次。</p>

<h3>区别总结</h3>

<p>1.proc是对象，而block不是</br>
2.在参数列表中，最多只能有一个block</br>
3.lambda检查参数个数，proc不检查</br>
4.lambda和proc处理‘return’的方式不同</br></p>

<p>原文:<a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?</a></p>
]]></content>
  </entry>
  
</feed>
