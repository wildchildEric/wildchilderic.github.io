<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WildChild's Blog]]></title>
  <link href="http://wildchildEric.github.io/atom.xml" rel="self"/>
  <link href="http://wildchildEric.github.io/"/>
  <updated>2013-10-03T00:50:20+08:00</updated>
  <id>http://wildchildEric.github.io/</id>
  <author>
    <name><![CDATA[Eric Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby中Block,Proc,Lambda区别(译)]]></title>
    <link href="http://wildchildEric.github.io/blog/2013/10/01/rubyde-blockyu-proc/"/>
    <updated>2013-10-01T22:52:00+08:00</updated>
    <id>http://wildchildEric.github.io/blog/2013/10/01/rubyde-blockyu-proc</id>
    <content type="html"><![CDATA[<h3>block,proc,lambda是什么？</h3>

<p>行话：闭包在Ruby中的体现。
</br>
白话：我们想复用的代码的组织方式。</p>

<figure class='code'><figcaption><span>Block Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>   <span class="c1"># block is in between the curly braces</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span>                    <span class="c1"># block is everything between the do and end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Proc Examples             </span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>              <span class="c1"># The &#39;&amp;&#39; tells ruby to turn the proc into a block </span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>                     <span class="c1"># The body of the Proc object gets executed when called</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Lambda Examples            </span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lam</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># proc 和 lambda 的简写形式</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="nb">proc</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span><span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>译注：<br/>-> 写法是 Kernel#lambda 的简短形式。<br/>Kernel#proc工厂方法和Proc.new是一样的。注意proc与 ->,yield不同,它是个方法。</p><footer><strong>rubymonk.com</strong> <cite><a href='http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/64-blocks-procs-lambdas'>Blocks, Procs, and Lambdas</a></cite></footer></blockquote>


<p>这些代码看起来非常相似，但其中有些细微的区别，我们接下来会讲述。</p>

<h3>Block和Proc区别</h3>

<h4>1.proc是对象，而block不是</h4>

<p>一个proc是Proc类的实例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这使得我们可以在proc上调用它的方法，赋值给变量。proc也可以返回他们自己。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span>  <span class="c1"># prints &#39;Hello World&#39;</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns &#39;Proc&#39;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">p</span>   <span class="c1"># a now equals p, a Proc instance</span>
</span><span class='line'><span class="nb">p</span>       <span class="c1"># returns a proc object &#39;#&lt;Proc:0x007f96b1a60eb0@(irb):46&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>相反，block只是方法调用语法的一部分。单独存在的block没有意义且只能存在于方法调用的参数列表里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">}</span>       <span class="c1"># syntax error  </span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">}</span>   <span class="c1"># syntax error</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">}</span> <span class="c1"># only works as part of the syntax of a method call</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.在参数列表中，block只能最多出现一次</h4>

<p>相反，你可以向方法传递多个proc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">multiple_procs</span><span class="p">(</span><span class="n">proc1</span><span class="p">,</span> <span class="n">proc2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">proc1</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="n">proc2</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;First proc&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Second proc&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">multiple_procs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Proc和Lambda的区别</h3>

<p>在我深入他们区别之前，需要强调的是他们都是Proc对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">class</span> <span class="c1"># returns &#39;Proc&#39;</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">class</span>  <span class="c1"># returns &#39;Proc&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而lambda是一种不同的proc，对象返回的时候我们可以觉察到这细微的差别：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span>   <span class="c1"># returns &#39;#&lt;Proc:0x007f96b1032d30@(irb):75&gt;&#39;</span>
</span><span class='line'><span class="n">lam</span>    <span class="c1"># returns &#39;&lt;Proc:0x007f96b1b41938@(irb):76 (lambda)&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&lsquo;(lambda)&#8217;记号提醒我们他们很相似，但也有不同，下面就是一些关键的区别</p>

<h4>1.Lambda检查参数的个数，而proc则不</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>    <span class="c1"># creates a lambda that takes 1 argument</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                    <span class="c1"># prints out 2</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span>                       <span class="c1"># ArgumentError: wrong number of arguments (0 for 1)</span>
</span><span class='line'><span class="n">lam</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>                <span class="c1"># ArgumentError: wrong number of arguments (3 for 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>相反,proc并不关心参数个数是否正确</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># creates a proc that takes 1 argument</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                   <span class="c1"># prints out 2</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>                      <span class="c1"># returns nil</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>               <span class="c1"># prints out 1 and forgets about the extra arguments</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，在参数个数错误的情况下调用proc，并没有发生错误。如果proc需要一个参数，但是没有参数传入，这样的情况下proc会返回nil值；如果参数个数多余proc所需参数个数，则proc会忽略多余的参数。</p>

<h4>2.Lambda和proc以不同方式处理&#8217;return&#8217;关键字</h4>

<p>在lambda中的&#8217;return&#8217;返回到调用lambda的地方</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">lambda_test</span>
</span><span class='line'>  <span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">lam</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda_test</span>                 <span class="c1"># calling lambda_test prints &#39;Hello World&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在proc中的&#8217;return&#8217;返回到调用包含proc调用的方法的地方</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_test</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc_test</span>                 <span class="c1"># calling proc_test prints nothing</span>
</span></code></pre></td></tr></table></div></figure>


<h3>那么什么是闭包（closure）？</h3>

<p>行话：带有引用环境的函数或者函数引用。不同于单纯的函数，闭包允许访问非本地变量，甚至在其作用域外。-维基百科
</br>
白话：类似一个手提箱，是一组这样的代码： 在其被打开（被调用）时，包含了所有当时打包的（创建的）。</p>

<figure class='code'><figcaption><span>Example of Proc objects preserving local context</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">counter</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">n</span><span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 1</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">call</span>            <span class="c1"># returns 3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>背景部分1：Lambda微积分和匿名函数</h3>

<p>Lambda得名于一种1930年代用于研究基础数学的微积分，Lambda微积分帮助简化可计算方程式的语意从而易于被学习。相关度最高的简化是使方程式匿名，也就是没有显式的基于方程式名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sqsum</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span>  <span class="c1">#&lt;-- normal function</span>
</span><span class='line'><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span> <span class="c1">#&lt;-- anonymous function</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般而言，在编程中，术语lambda指匿名函数，这些匿名函数在一些编程语言中很常见且是显式的（如javascript），而在另外一些语言中则比较隐秘（如Ruby）。</p>

<h3>背景部分2：Proc名字的由来</h3>

<p>Proc是procedure（程序,过程）的缩写，既是用来执行特定任务而被打包成单元的一组指令。在不同的语言中，可能被称作function，routine，method或者unit。他们在一个程序中通常会被调用多次。</p>

<h3>区别总结</h3>

<p>1.proc是对象，而block不是</br>
2.在参数列表中，最多只能有一个block</br>
3.lambda检查参数个数，proc不检查</br>
4.lambda和proc处理‘return’的方式不同</br></p>

<p>原文:<a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">What Is the Difference Between a Block, a Proc, and a Lambda in Ruby?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 常用快捷键(Mac)]]></title>
    <link href="http://wildchildEric.github.io/blog/2013/10/01/sublime-text-2-chang-yong-kuai-jie-jian-mac/"/>
    <updated>2013-10-01T19:54:00+08:00</updated>
    <id>http://wildchildEric.github.io/blog/2013/10/01/sublime-text-2-chang-yong-kuai-jie-jian-mac</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th align="left"><code>键盘符号映射</code></th>
<th align="left">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘</td>
<td align="left">Command 键</td>
</tr>
<tr>
<td align="left">⇧</td>
<td align="left">Shift 键</td>
</tr>
<tr>
<td align="left">⌃</td>
<td align="left">Control 键</td>
</tr>
<tr>
<td align="left">⌥</td>
<td align="left">Option 键</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>打开/前往</code>         </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘T     </td>
<td align="left">前往文件</td>
</tr>
<tr>
<td align="left">⌘⌃P  </td>
<td align="left">前往项目</td>
</tr>
<tr>
<td align="left">⌘R     </td>
<td align="left">前往 method</td>
</tr>
<tr>
<td align="left">⌘⇧P  </td>
<td align="left">命令提示</td>
</tr>
<tr>
<td align="left">⌃G     </td>
<td align="left">前往行</td>
</tr>
<tr>
<td align="left">⌘KB    </td>
<td align="left">开关侧栏</td>
</tr>
<tr>
<td align="left">⌃ `  </td>
<td align="left">python 控制台</td>
</tr>
<tr>
<td align="left">⌘⇧N  </td>
<td align="left">新建窗口</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>编辑</code>            </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘L     </td>
<td align="left">选择行 (重复按下将下一行加入选择)</td>
</tr>
<tr>
<td align="left">⌘D     </td>
<td align="left">选择词 (重复按下时多重选择相同的词进行多重编辑)</td>
</tr>
<tr>
<td align="left">⌃⇧M  </td>
<td align="left">选择括号内的内容</td>
</tr>
<tr>
<td align="left">⌘⇧↩    </td>
<td align="left">在当前行前插入新行</td>
</tr>
<tr>
<td align="left">⌘↩   </td>
<td align="left">在当前行后插入新行</td>
</tr>
<tr>
<td align="left">⌃⇧K  </td>
<td align="left">删除行</td>
</tr>
<tr>
<td align="left">⌘KK    </td>
<td align="left">从光标处删除至行尾</td>
</tr>
<tr>
<td align="left">⌘K⌫  </td>
<td align="left">从光标处删除至行首</td>
</tr>
<tr>
<td align="left">⌘⇧D  </td>
<td align="left">复制(多)行</td>
</tr>
<tr>
<td align="left">⌘J     </td>
<td align="left">合并(多)行</td>
</tr>
<tr>
<td align="left">⌘KU    </td>
<td align="left">改为大写</td>
</tr>
<tr>
<td align="left">⌘KL    </td>
<td align="left">改为小写</td>
</tr>
<tr>
<td align="left">⌘ /    </td>
<td align="left">注释</td>
</tr>
<tr>
<td align="left">⌘⌥ / </td>
<td align="left">   块注释</td>
</tr>
<tr>
<td align="left">⌘Y     </td>
<td align="left">恢复或重复</td>
</tr>
<tr>
<td align="left">⌘⇧V  </td>
<td align="left">粘贴并自动缩进</td>
</tr>
<tr>
<td align="left">⌃ space    </td>
<td align="left">自动完成(重复按下选择下一个提示)</td>
</tr>
<tr>
<td align="left">⌃M     </td>
<td align="left">跳转至对应的括号</td>
</tr>
<tr>
<td align="left">⌘U     </td>
<td align="left">软撤销（可撤销光标移动）</td>
</tr>
<tr>
<td align="left">⌘⇧U  </td>
<td align="left">软重做（可重做光标移动）</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>XML/HTML</code>      </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘⇧A     </td>
<td align="left">选择标签内的内容</td>
</tr>
<tr>
<td align="left">⌘⌥ .    </td>
<td align="left">闭合当前标签</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>查找/替换</code>         </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘F     </td>
<td align="left">查找</td>
</tr>
<tr>
<td align="left">⌘⌥F  </td>
<td align="left">替换</td>
</tr>
<tr>
<td align="left">⌘⌥G  </td>
<td align="left">查找下一个符合当前所选的内容</td>
</tr>
<tr>
<td align="left">⌘⌃G  </td>
<td align="left">查找所有符合当前所选的内容进行多重编辑</td>
</tr>
<tr>
<td align="left">⌘⇧F  </td>
<td align="left">在所有打开的文件中进行查找</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>拆分窗口/标签页</code>        </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘⌥1         </td>
<td align="left">单列</td>
</tr>
<tr>
<td align="left">⌘⌥2         </td>
<td align="left">双列</td>
</tr>
<tr>
<td align="left">⌘⌥5         </td>
<td align="left">网格 (4组)</td>
</tr>
<tr>
<td align="left">⌃ [1,2,3,4]  </td>
<td align="left">焦点移动至相应组</td>
</tr>
<tr>
<td align="left">⌃⇧[1,2,3,4]    </td>
<td align="left">将当前文件移动至相应组</td>
</tr>
<tr>
<td align="left">⌘[1,2,3…]  </td>
<td align="left">选择相应标签页</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>书签</code>            </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘F2       </td>
<td align="left">添加/去除书签</td>
</tr>
<tr>
<td align="left">F2      </td>
<td align="left">下一个书签</td>
</tr>
<tr>
<td align="left">⇧F2       </td>
<td align="left">前一个书签</td>
</tr>
<tr>
<td align="left">⌘⇧F2    </td>
<td align="left">清除书签</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left"><code>标记</code>            </th>
<th align="left"> &nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘K space   </td>
<td align="left">设置标记</td>
</tr>
<tr>
<td align="left">⌘KW    </td>
<td align="left">从光标位置删除至标记</td>
</tr>
<tr>
<td align="left">⌘KA    </td>
<td align="left">从光标位置选择至标记</td>
</tr>
<tr>
<td align="left">⌘KG    </td>
<td align="left">清除标记</td>
</tr>
</tbody>
</table>


<p></br>
参考自 <a href="http://lucifr.com/139235/sublime-text-2-useful-shortcuts/">Lucifr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode 常用快捷键]]></title>
    <link href="http://wildchildEric.github.io/blog/2013/10/01/xcode-chang-yong-kuai-jie-jian/"/>
    <updated>2013-10-01T19:49:00+08:00</updated>
    <id>http://wildchildEric.github.io/blog/2013/10/01/xcode-chang-yong-kuai-jie-jian</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th align="left"><code>键盘符号映射</code></th>
<th align="left">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘</td>
<td align="left">Command 键</td>
</tr>
<tr>
<td align="left">⇧</td>
<td align="left">Shift 键</td>
</tr>
<tr>
<td align="left">⌃</td>
<td align="left">Control 键</td>
</tr>
<tr>
<td align="left">⌥</td>
<td align="left">Option 键</td>
</tr>
</tbody>
</table>


<p></br></p>

<table>
<thead>
<tr>
<th align="left">&nbsp;</th>
<th align="left">&nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">⌘ arrow up/down</td>
<td align="left">切换 当前文件头文件和实现文件</td>
</tr>
<tr>
<td align="left">⌃⌘ arrow left/right</td>
<td align="left">切换历史上/下一个文件</td>
</tr>
<tr>
<td align="left">⌘B/R</td>
<td align="left">编译/运行</td>
</tr>
<tr>
<td align="left">⌘   left click  on word</td>
<td align="left">可以在 方法的声明/实现, 变量的定义, 类的定义中跳转|</td>
</tr>
<tr>
<td align="left">⌥   left click  on word</td>
<td align="left">对当前内容做快速帮助</td>
</tr>
<tr>
<td align="left">⇧⌘Y</td>
<td align="left">显示 debug工作区</td>
</tr>
<tr>
<td align="left">⌘f/⌥⌘f</td>
<td align="left">搜索/替换  (搜索后⌘G可以跳到下一个结果)</td>
</tr>
<tr>
<td align="left">⇧⌘F</td>
<td align="left">全局搜索</td>
</tr>
<tr>
<td align="left">(esc)</td>
<td align="left">自动完成菜单</td>
</tr>
<tr>
<td align="left">⇧⌘o</td>
<td align="left">快速定位文件</td>
</tr>
<tr>
<td align="left">⇧⌘j</td>
<td align="left">在项目导航中显示当前文件</td>
</tr>
<tr>
<td align="left">⌥ click项目导航中的文件</td>
<td align="left">可以在辅助编辑器里打开该文件, 方便同时查看多个源文件</td>
</tr>
<tr>
<td align="left">⌘L</td>
<td align="left">定为到文件的指定行</td>
</tr>
<tr>
<td align="left">⇧⌘L</td>
<td align="left">跳到光标所在位置</td>
</tr>
<tr>
<td align="left">⌃i</td>
<td align="left">对选中文字 重新格式化缩进</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
